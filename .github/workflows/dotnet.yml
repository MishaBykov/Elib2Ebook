name: .NET

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    strategy:
        matrix:
          os: [ubuntu-latest, macos-latest, windows-latest]
          
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 8.0.x
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore -c release
      
    - name: Test
      run: dotnet test --no-build --verbosity normal
      
    - name: Min
      run: >
        dotnet publish -c release -p:PublishDir=../dist/min --no-self-contained 
        -p:PublishSingleFile=true -p:DebugType=embedded -p:PublishTrimmed=false 
        -p:EnableCompressionInSingleFile=false --use-current-runtime Elib2EbookCli
        
    - name: Portable
      run: >
        dotnet publish -c release -p:PublishDir=../dist/portable --self-contained 
        -p:PublishSingleFile=true -p:DebugType=embedded
        -p:EnableCompressionInSingleFile=true --use-current-runtime Elib2EbookCli

    - uses: actions/upload-artifact@v3
      with:
        name: Elib2Ebook-${{ matrix.os }}-min
        path: ${{ github.workspace }}/dist/min

    - uses: actions/upload-artifact@v3
      with:
        name: Elib2Ebook-${{ matrix.os }}-portable
        path: ${{ github.workspace }}/dist/portable
        
  check_version:
    name: Check version
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.get-version.outputs.version }}
      LAST_TAG: ${{ steps.last_release.outputs.tag_name }}

    steps:
      - name: check repository
        uses: actions/checkout@v4

      - uses: kzrnm/get-net-sdk-project-versions-action@v1
        id: get-version
        with:
          proj-path: Core/Core.csproj

      - name: "get-last-release"
        id: last_release
        uses: InsonusK/get-latest-release@v1.0.1
        with:
          myToken: ${{ github.token }}
          
  create_release:
    needs: [ build, check_version ]
    runs-on: ubuntu-latest
    if: ${{ needs.check_version.outputs.LAST_TAG != needs.check_version.outputs.VERSION }}
    outputs:
      UPLOAD_URL: ${{ steps.create_release.outputs.upload_url }}
    
    steps:
      - name: release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: false
          release_name: ${{needs.check_version.outputs.VERSION}}
          tag_name: ${{needs.check_version.outputs.VERSION}}
        env:
          GITHUB_TOKEN: ${{ github.token }}
    
  upload_release:
    needs: [create_release]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        version: [ min, portable ]
    
    steps:
      - name: download-artifact-${{ matrix.os }}-${{ matrix.version }}
        uses: actions/download-artifact@v3
        with:
          name: Elib2Ebook-${{ matrix.os }}-${{ matrix.version }}
          path: ${{ github.workspace }}/${{ matrix.os }}-${{ matrix.version }} 
                  
      - name: Install zip
        uses: montudor/action-zip@v0.1.0
        
      - name: Zip output
        run: zip -qq -x "*.pdb" -r ../Elib2Ebook-${{ matrix.os }}-${{ matrix.version }}.zip .
        working-directory: ${{ github.workspace }}/${{ matrix.os }}-${{ matrix.version }}
                 
      - name: upload ${{ matrix.os }}-${{ matrix.version }} asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.create_release.outputs.UPLOAD_URL }}
          asset_path: Elib2Ebook-${{ matrix.os }}-${{ matrix.version }}.zip
          asset_name: Elib2Ebook-${{ matrix.os }}-${{ matrix.version }}.zip
          asset_content_type: application/zip

