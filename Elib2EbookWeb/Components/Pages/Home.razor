@page "/"
@using System.Text
@using Core.Configs
@using Core.Extensions
@using Core.Misc
@using Core.Misc.TempFolder
@using Elib2EbookWeb.Misc
@rendermode InteractiveServer
@inject IJSRuntime jsRuntime

<PageTitle>Elib2Ebook</PageTitle>

<MudGrid>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4">
            <MudForm Spacing="10">
                <MudTextField T="string" Immediate="true" Label="Ссылка на книгу" Required="true" RequiredError="Ссылка на книгу обязательна!" Variant="Variant.Outlined" TextChanged="@(value => _options.Url = new[] { value })"/>
                
                <MudStack>
                    <MudToggleGroup T="string" SelectionMode="SelectionMode.MultiSelection" Color="Color.Tertiary" CheckMark @bind-Values="_options.Format">
                        <MudToggleItem Value="@("epub")" UnselectedIcon="@Icons.Material.Filled.CheckBoxOutlineBlank" SelectedIcon="@Icons.Material.Filled.CheckBox"/>
                        <MudToggleItem Value="@("fb2")" UnselectedIcon="@Icons.Material.Filled.CheckBoxOutlineBlank" SelectedIcon="@Icons.Material.Filled.CheckBox" />
                        <MudToggleItem Value="@("cbz")" UnselectedIcon="@Icons.Material.Filled.CheckBoxOutlineBlank" SelectedIcon="@Icons.Material.Filled.CheckBox" />
                    </MudToggleGroup>
                </MudStack>
                
                <MudTextField T="string" Label="Login" Variant="Variant.Outlined" @bind-Value="@_options.Login"/>
                <MudTextField T="string" Label="Password" InputType="InputType.Password" Variant="Variant.Outlined"  @bind-Value="@_options.Password"/>
            </MudForm>
        </MudPaper>
        <MudPaper Class="pa-4 mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DropShadow="false" OnClick="Generate">Сгенерировать</MudButton>
        </MudPaper>
    </MudItem>
    
    @if (_logs.Length > 0) {
        <MudItem xs="12" sm="7">
            <MudPaper Class="pa-4">
                <pre>
                    @_logs.ToString()
                </pre>
            </MudPaper>
        </MudItem>
    }
</MudGrid>


@code {
    private readonly StringBuilder _logs = new();
    private readonly Options _options = new();

    private async Task Generate() {
        _logs.Clear();
        var logger = new SbLogger(_logs, StateHasChanged);
        
        using var tempSave = TempFolderFactory.Create("Books", true);
        
        _options.Timeout = 10;
        _options.SavePath = tempSave.Path;

        try {
            using var getterConfig = BookGetterConfig.GetDefault(_options, logger);
            using var getter = GetterProvider.Get(getterConfig, _options.Url.First().AsUri());
            await getter.Init();
            await getter.Authorize();

            foreach (var url in _options.Url) {
                logger.LogInformation($"Начинаю генерацию книги {url.CoverQuotes()}");
                try {
                    var book = await getter.Get(url.AsUri());
                    foreach (var format in _options.Format) {
                        await BuilderProvider.Get(format, _options, logger).Build(book);
                    }

                    foreach (var fileName in Directory.GetFiles(tempSave.Path)) {
                        await using var file = File.OpenRead(fileName);
                        using var streamRef = new DotNetStreamReference(file);
                        await jsRuntime.InvokeVoidAsync("downloadFileFromStream", Path.GetFileName(file.Name), streamRef);
                    }

                } catch (Exception ex) {
                    logger.LogInformation($"Генерация книги {url} завершилась с ошибкой. {ex}");
                }
            }
        } catch (Exception ex) {
            logger.LogInformation(ex.Message);
        }
    }
}