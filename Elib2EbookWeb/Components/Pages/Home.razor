@page "/"
@using Core.Configs
@using Core.Extensions
@using Core.Misc
@using Core.Misc.TempFolder
@using Core.Types.Book
@rendermode InteractiveServer
@inject IJSRuntime JsRuntime
@inject ISnackbar Snackbar

<PageTitle>Elib2Ebook</PageTitle>

<MudGrid Justify="Justify.Center">
    <MudItem xs="12" sm="12" md="10" lg="6" xl="4">
        <BookForm OnClick="OnClick"/>
    </MudItem>
</MudGrid>

@if (_shortBook != default) {
    <MudGrid Justify="Justify.Center" class="mt-2">
        <MudItem xs="12" sm="12" md="10" lg="6" xl="4">
            <ShortBook Book="_shortBook"/>
        </MudItem>
    </MudGrid>
}


@code {
    private Book? _shortBook;
    
    private async Task OnClick(Options options, ILogger logger) {
        using var tempSave = TempFolderFactory.Create("Books_" + Guid.NewGuid());

        options.Timeout = 10;
        options.SavePath = tempSave.Path;

        try {
            using var getterConfig = BookGetterConfig.GetDefault(options, logger);
            using var getter = GetterProvider.Get(getterConfig, options.Url.First().AsUri());
            
            await getter.Init();
            await getter.Authorize();

            foreach (var url in options.Url) {
                try {
                    getterConfig.Options.NoChapters = true;
                    _shortBook = await getter.Get(url.AsUri());

                    StateHasChanged();
                    getterConfig.Options.NoChapters = false;

                    using var book = await getter.Get(url.AsUri());
                    foreach (var format in options.Format) {
                        await BuilderProvider.Get(format, options, logger).Build(book);
                    }
                    
                    logger.LogInformation("Ожидайте. Сейчас начнется скачивание");

                    foreach (var fileName in Directory.GetFiles(tempSave.Path)) {
                        await using var file = File.OpenRead(fileName);
                        using var streamRef = new DotNetStreamReference(file);
                        await JsRuntime.InvokeVoidAsync("downloadFileFromStream", Path.GetFileName(file.Name), streamRef);
                    }

                    Snackbar.Add($"Генерация книги {GetBookName(url, _shortBook).CoverQuotes()} завершена", Severity.Success);
                } catch (Exception ex) {
                    logger.LogInformation($"Генерация книги {GetBookName(url, _shortBook).CoverQuotes()} завершилась с ошибкой. {ex}");
                    Snackbar.Add($"Генерация книги {GetBookName(url, _shortBook).CoverQuotes()} завершилась с ошибкой. {ex.Message}", Severity.Error);
                }
            }
        } catch (Exception ex) {
            logger.LogInformation(ex.Message);
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private string GetBookName(string url, Book? book) => book?.Title ?? url;
}